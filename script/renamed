#!/usr/bin/env bash
#/ bootstrap - Used to setup my dotfiles on a new machine.
#/
#/ Usage:
#/   bootstrap [-s|--skip-bin-dir]
set -e

skip_bin_dir=
for i in "$@"; do
    case $i in
        -h|--help)
            grep ^\#\/ < "$0" | cut -c4-
            exit 1
            ;;
        -s|--skip-bin-dir)
            skip_bin_dir=1
            shift
            ;;
        *)
            shift
            ;;
    esac
done


dotfiles_dir="$(cd "$(dirname "$0")/.." && pwd)"
overwrites="$dotfiles_dir/overwrites"
[ ! -d "$overwrites" ] && mkdir "$overwrites"

perform_safe_link() {
    local src=$1 dest=$2
    if [ -e "$dest" ]; then
        if [ -L "$dest" ] && [ "$(readlink "$dest")" = "$src" ]; then
            echo "  $dest is already symlinked to $src; skipping."
            return
        else
            echo "  $dest already exists; moving to $overwrites for manual cleanup."
            if [ -d "$dest" ]; then
                mv "$dest" "$overwrites/$(basename "$dest")" || {
                    rm -r "${overwrites/$(basename "$dest"):?}"
                    mv "$dest" "$overwrites/$(basename "$dest")"
                }
            else
                mv "$dest" "$overwrites"
            fi
        fi
    fi

    mkdir -p "$(dirname "$dest")"
    ln -s "$src" "$dest"
}

for dotfile in $(find "$dotfiles_dir" -mindepth 1 -maxdepth 1 ! -path '*.git*' ! -path "*$(dirname "$0")" ! -path "*$(basename "$overwrites")"); do
    dotfile_basename="$(basename "$dotfile")"
    if [[ "$dotfile_basename" =~ ^\. ]]; then
        if [ "$dotfile_basename" = ".emacs.d" ]; then
            echo ".emacs.d is a special case; symlinking as .handrolled-emacs in $HOME"
            dest="$HOME/.handrolled-emacs"
        else
            echo "$dotfile is a hidden file; symlinking to $HOME"
            dest="$HOME/$dotfile_basename"
        fi
    elif [ -d "$dotfile" ]; then
        config_home="${XDG_CONFIG_HOME:-$HOME/.config}"
        echo "$dotfile is a non-hidden directory; symlinking to $config_home"
        dest="$config_home/$dotfile_basename"
    else
        echo "$dotfile is a non-hidden regular file and is too ambiguous to determine where to place it."
        continue
    fi

    perform_safe_link "$dotfile" "$dest"
done

[ "$(ls -A "$overwrites")" ] && {
    echo "Files were overwritten during bootstrapping; originals can be found in $overwrites"
}

cd "$dotfiles_dir" && git submodule update --init

[ -e "$HOME/.emacs.d" ] && [ ! -f "$HOME/.emacs.d/chemacs.el" ] && {
    echo "$HOME/.emacs.d exists and is not chemacs; backing it up."
    mv "$HOME/.emacs.d" "$dotfiles_dir/overwrites/.emacs.d" || {
	echo "  failed to backup old .emacs.d directory; it already is backed up in $dotfiles_dir/overwrites"
	echo "  please intervene manually and rerun this script."
    }
}

[ ! -e "$HOME/.emacs.d" ] && git clone "https://github.com/plexus/chemacs2.git" "$HOME/.emacs.d"

[ "$skip_bin_dir" ] && {
    git clone git@github.com:cjonsmith/bin.git "$HOME/bin"
}
